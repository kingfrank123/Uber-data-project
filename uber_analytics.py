# -*- coding: utf-8 -*-
"""Uber_Analytics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sOCNYxPfi_GqeFWWOW7wl-SXEc1df8ZC
"""

# I am using google collab as my "IDE" so this is how i set up
from google.colab import drive
drive.mount('/content/drive/')

# Defining my path
# grabbed my data set off https://www.nyc.gov/site/tlc/about/tlc-trip-record-data.page in this case it was Yellow Taxi Feburary 
path = "/content/drive/MyDrive/Colab Notebooks/yellow_tripdata_2023-02.parquet"

# normally i would use pandas but to work with parquet files we use pyarrow 
# link to documentation -> https://arrow.apache.org/docs/python/parquet.html
import pyarrow.parquet as pq

trips = pq.read_table(path)
trips = trips.to_pandas()

trips.head()

trips.info()
# i am looking for the data types in this dataset
# if the datetime columns were of data type 'Object' then you would use pandas .to_datetime function to convert Object -> datetime Dtype

# cleanup (dropping duplicates)
df = trips
df = df.drop_duplicates().reset_index(drop=True)
df = df.dropna()
df['trip_id'] = df.index # giving a trip_id column based on row

df.head()

# replacing the index to suit our Datetime Table in our Data Model
Datetime = df[['tpep_pickup_datetime','tpep_dropoff_datetime']].reset_index(drop=True)

Datetime['tpep_pickup_datetime'] = Datetime['tpep_pickup_datetime']
Datetime['pickup_hour'] = Datetime['tpep_pickup_datetime'].dt.hour
Datetime['pickup_day'] = Datetime['tpep_pickup_datetime'].dt.day
Datetime['pickup_month'] = Datetime['tpep_pickup_datetime'].dt.month
Datetime['pickup_year'] = Datetime['tpep_pickup_datetime'].dt.year
Datetime['pickup_weekday'] = Datetime['tpep_pickup_datetime'].dt.weekday

Datetime['tpep_dropoff_datetime'] = Datetime['tpep_dropoff_datetime']
Datetime['dropoff_hour'] = Datetime['tpep_dropoff_datetime'].dt.hour
Datetime['dropoff_day'] = Datetime['tpep_dropoff_datetime'].dt.day
Datetime['dropoff_month'] = Datetime['tpep_dropoff_datetime'].dt.month
Datetime['dropoff_year'] = Datetime['tpep_dropoff_datetime'].dt.year
Datetime['dropoff_weekday'] = Datetime['tpep_dropoff_datetime'].dt.weekday

Datetime['datetime_id'] = Datetime.index

Datetime = Datetime[['datetime_id', 'tpep_pickup_datetime', 'pickup_hour', 'pickup_day', 'pickup_month', 'pickup_year', 'pickup_weekday',
                             'tpep_dropoff_datetime', 'dropoff_hour', 'dropoff_day', 'dropoff_month', 'dropoff_year', 'dropoff_weekday']]

# our Datetime model is now complete
Datetime.head()

# Now we do the same with our other data tables
Passenger_count = df[['passenger_count']].reset_index(drop=True)
Passenger_count['passenger_count_id'] = Passenger_count.index
Passenger_count = Passenger_count[['passenger_count_id','passenger_count']]

trip_distance = df[['trip_distance']].reset_index(drop=True)
trip_distance['trip_distance_id'] = trip_distance.index
trip_distance = trip_distance[['trip_distance_id','trip_distance']]

rate_code_type = {
    1:"Standard rate",
    2:"JFK",
    3:"Newark",
    4:"Nassau or Westchester",
    5:"Negotiated fare",
    6:"Group ride"
}

RatecodeID = df[['RatecodeID']].reset_index(drop=True)
RatecodeID['Rate_Code_ID'] = RatecodeID.index
RatecodeID['Ratecode_name'] = RatecodeID['RatecodeID'].map(rate_code_type)
RatecodeID = RatecodeID[['Rate_Code_ID','RatecodeID','Ratecode_name']]

RatecodeID['RatecodeID'].unique()
# no idea what ratecode 99 is

RatecodeID = RatecodeID[RatecodeID['RatecodeID'] != 99]
# removing the rows with 99 as the identifer as data we dont want
RatecodeID['RatecodeID'].unique()

Location_Info_T = df[['PULocationID', 'DOLocationID']].reset_index(drop=True)
Location_Info_T['Location_Info'] = Location_Info_T.index
Location_Info_T = Location_Info_T[['Location_Info','PULocationID','DOLocationID']]

payment_type_name = {
    1:"Credit card",
    2:"Cash",
    3:"No charge",
    4:"Dispute",
    5:"Unknown",
    6:"Voided trip"
}

Payment_type = df[['payment_type']].reset_index(drop=True)
Payment_type['payment_type_id'] = Payment_type.index
Payment_type['payment_type_name'] = Payment_type['payment_type'].map(payment_type_name)
Payment_type = Payment_type[['payment_type_id','payment_type','payment_type_name']]

Main_Table = df.merge(Passenger_count, left_on='trip_id', right_on='passenger_count_id') \
             .merge(trip_distance, left_on='trip_id', right_on='trip_distance_id') \
             .merge(RatecodeID, left_on='trip_id', right_on='Rate_Code_ID') \
             .merge(Location_Info_T, left_on='trip_id', right_on='Location_Info') \
             .merge(Datetime, left_on='trip_id', right_on='datetime_id') \
             .merge(Payment_type, left_on='trip_id', right_on='payment_type_id') \
             [['trip_id','VendorID', 'datetime_id', 'passenger_count_id',
               'trip_distance_id', 'Rate_Code_ID', 'store_and_fwd_flag', 'Location_Info',
               'payment_type_id', 'fare_amount', 'extra', 'mta_tax', 'tip_amount', 'tolls_amount',
               'improvement_surcharge', 'total_amount','congestion_surcharge','Airport_fee']]

Main_Table

